/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateScheduleArgs } from "./CreateScheduleArgs";
import { UpdateScheduleArgs } from "./UpdateScheduleArgs";
import { DeleteScheduleArgs } from "./DeleteScheduleArgs";
import { ScheduleFindManyArgs } from "./ScheduleFindManyArgs";
import { ScheduleFindUniqueArgs } from "./ScheduleFindUniqueArgs";
import { Schedule } from "./Schedule";
import { Clinic } from "../../clinic/base/Clinic";
import { Doctor } from "../../doctor/base/Doctor";
import { ScheduleService } from "../schedule.service";

@graphql.Resolver(() => Schedule)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ScheduleResolverBase {
  constructor(
    protected readonly service: ScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _schedulesMeta(
    @graphql.Args() args: ScheduleFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [Schedule])
  async schedules(
    @graphql.Args() args: ScheduleFindManyArgs
  ): Promise<Schedule[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Schedule, { nullable: true })
  async schedule(
    @graphql.Args() args: ScheduleFindUniqueArgs
  ): Promise<Schedule | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Schedule)
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "create",
    possession: "any",
  })
  async createSchedule(
    @graphql.Args() args: CreateScheduleArgs
  ): Promise<Schedule> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        clinic: {
          connect: args.data.clinic,
        },

        doctor: {
          connect: args.data.doctor,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Schedule)
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "update",
    possession: "any",
  })
  async updateSchedule(
    @graphql.Args() args: UpdateScheduleArgs
  ): Promise<Schedule | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          clinic: {
            connect: args.data.clinic,
          },

          doctor: {
            connect: args.data.doctor,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Schedule)
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "delete",
    possession: "any",
  })
  async deleteSchedule(
    @graphql.Args() args: DeleteScheduleArgs
  ): Promise<Schedule | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => Clinic, { nullable: true })
  async clinic(@graphql.Parent() parent: Schedule): Promise<Clinic | null> {
    const result = await this.service.getClinic(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.ResolveField(() => Doctor, { nullable: true })
  async doctor(@graphql.Parent() parent: Schedule): Promise<Doctor | null> {
    const result = await this.service.getDoctor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
